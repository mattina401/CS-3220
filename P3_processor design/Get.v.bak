module Get(instWord, opcode, rd, rs1, rs2, imm, writerg, Bsel);

	input [31:0] instWord;
	output reg [7:0] opcode;
	output reg [3:0] rd, rs1, rs2;
	output reg [15:0] imm;
	output reg writerg;
	output reg [1:0] Bsel;
	
	always @(instWord) begin

		//ALU_R
		if (instWord[3:0] == 4'b0000) begin
			opcode <= instWord[7:0];
			rd <= instWord[31:28];
			rs1 <= instWord[27:24];
			rs2 <= instWord[23:20];
			//imm <= instWord[19:8];
			writerg <= 1'b1;
			Bsel <= 2'b00;
		end
		//ALU_I
		if (instWord[3:0] == 4'b1000) begin
				//MVHI
				if (instWord[7:4] == 4'b1011) begin
					opcode <= instWord[7:0];
					rd <= instWord[31:28];
					//rs1 <= instWord[27:24];
					//rs2 <= instWord[23:20];
					imm <= instWord[23:8];
					writerg <= 1'b0;
					Bsel <= 2'b00;
				end
				else begin
					opcode <= instWord[7:0];
					rd <= instWord[31:28];
					rs1 <= instWord[27:24];
					//rs2 <= instWord[23:20];
					imm <= instWord[23:8];
					writerg <= 1'b1;
					Bsel <= 2'b00;
				end			
		end
		//LW
		if (instWord[3:0] == 4'b1001) begin
			opcode <= instWord[7:0];
			rd <= instWord[31:28];
			rs1 <= instWord[27:24];
			//rs2 <= instWord[23:20];
			imm <= instWord[23:8];
			writerg <= 1'b0;
			Bsel <= 2'b00;
		end
		//SW
		if (instWord[3:0] == 4'b0101) begin
			opcode <= instWord[7:0];
			//rd <= instWord[31:28];
			rs1 <= instWord[31:28];
			rs2 <= instWord[27:24];
			imm <= instWord[23:8];
			writerg <= 1'b1;
			Bsel <= 2'b00;
		end
		//CMP_R
		if (instWord[3:0] == 4'b0010) begin
			opcode <= instWord[7:0];
			rd <= instWord[31:28];
			rs1 <= instWord[27:24];
			rs2 <= instWord[23:20];
			//imm <= instWord[19:8];
			writerg <= 1'b1;
			Bsel <= 2'b00;
		end
		//CMP_I
		if (instWord[3:0] == 4'b1010) begin
			opcode <= instWord[7:0];
			rd <= instWord[31:28];
			rs1 <= instWord[27:24];
			//rs2 <= instWord[23:20];
			imm <= instWord[23:8];
			writerg <= 1'b1;
			Bsel <= 2'b00;
		end
		//BRANCH
		if (instWord[3:0] == 4'b0110) begin
			if(instWord[27:24] == 4'b0000) begin
				opcode <= instWord[7:0];
				//rd <= instWord[31:28];
				rs1 <= instWord[31:28];
				//rs2 <= instWord[23:20];
				imm <= instWord[23:8];
				writerg <= 1'b0;
				Bsel <= 2'b01;
			end
			else begin
				opcode <= instWord[7:0];
				//rd <= instWord[31:28];
				rs1 <= instWord[31:28];
				rs2 <= instWord[27:24];
				imm <= instWord[23:8];
				writerg <= 1'b0;
				Bsel <= 2'b01;
			end
		end
		//JAL
		if (instWord[3:0] == 4'b1011) begin
			opcode <= instWord[7:0];
			rd <= instWord[31:28];
			rs1 <= instWord[27:24];
			//rs2 <= instWord[23:20];
			imm <= instWord[23:8];
			writerg <= 1'b0;
			Bsel <= 2'b01;
		end
	
		//opcode = instWord[7:0];
		//rd = instWord[31:28];
		//rs1 = instWord[27:24];
		//rs2 = instWord[23:20];
		//imm = instWord[23:8];
		//if (opcode[3:0] == 4'b0101 || opcode[3:0] == 4'b0110) begin
			//rs2 = rs1;
			//rs1 = rd;
		//end
	end

endmodule